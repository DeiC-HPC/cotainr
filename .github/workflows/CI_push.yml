name: CI on push to branch
on:
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-format:
    name: Lint and check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up uv
        uses: astral-sh/setup-uv@v5
      - name: Verify the uv.lock is up-to-date
        run: uv lock --check
      - name: Install linting dependencies
        run: uv sync --python 3.12 --managed-python --group=lint --frozen
      - name: Restore pre-commit cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-3-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Run pre-commit on all files
        run: uv run pre-commit run --show-diff-on-failure --color=always --all-files

  read_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout to repository
        uses: actions/checkout@v4
      - name: Set matrix data
        id: set-matrix
        run: echo "matrix=$(jq -c . < .github/workflows/matrix_limited.json)" >> $GITHUB_OUTPUT

  get_branch_name:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch-names.outputs.current_branch }}
      main_name: ${{ steps.branch-names.outputs.default_branch }}
    steps:
      - name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

  container_to_use:
    runs-on: ubuntu-latest
    needs: [ read_matrix, get_branch_name ]
    outputs:
      container_tag: ${{ steps.image_check.outputs.container_tag }}
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        ${{ insert }}: ${{ fromJson(needs.read_matrix.outputs.matrix) }}
        exclude:
          - python-version: 3.12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check what container to use from GHCR (current branch or default)
        id: image_check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x .github/workflows/get_container_to_use.sh
          .github/workflows/get_container_to_use.sh ${{ matrix.singularity.provider }} ${{ matrix.singularity.version }} ${{ needs.get_branch_name.outputs.branch_name }}
        shell: bash

  run-unittests-AMD:
    needs: [ read_matrix, container_to_use ]
    runs-on: ubuntu-latest
    name: Run unittests
    permissions:
      packages: read
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.read_matrix.outputs.matrix) }}
    container:
      image: ghcr.io/deic-hpc/cotainr/${{ matrix.singularity.provider }}/${{ matrix.singularity.version }}:${{ needs.container_to_use.outputs.container_tag }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up uv
        uses: astral-sh/setup-uv@v5
      - name: Install python
        run: uv python install ${{ matrix.python-version }}
      - name: Install test dependencies
        run: uv sync --python ${{ matrix.python-version }} --managed-python --group=tests --frozen
      - name: Run unittests via pytest
        run: uv run pytest -vv -m "not endtoend and not singularity_integration and not conda_integration"

  run-unittests-ARM:
    needs: [ read_matrix, container_to_use ]
    runs-on: ubuntu-latest-arm
    name: Run unittests
    permissions:
      packages: read
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.read_matrix.outputs.matrix) }}
    container:
      image: ghcr.io/deic-hpc/cotainr/${{ matrix.singularity.provider }}/${{ matrix.singularity.version }}:${{ needs.container_to_use.outputs.container_tag }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up uv
        uses: astral-sh/setup-uv@v5
      - name: Install python
        run: uv python install ${{ matrix.python-version }}
      - name: Install test dependencies
        run: uv sync --python ${{ matrix.python-version }} --managed-python --group=tests --frozen
      - name: Run unittests via pytest
        run: uv run pytest -vv -m "not endtoend and not singularity_integration and not conda_integration"
