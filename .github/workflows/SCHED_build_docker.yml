name: Build Docker and Deploy Images to GHCR

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  changed-files:
    runs-on: ubuntu-latest  # windows-latest || macos-latest
    name: Test changed-files
    outputs:
      files_changed: ${{ steps.changed-files-docker-build.outputs.any_changed }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      # determine if docker build files changes
      - name: Get changed files
        id: changed-files-docker-build
        uses: tj-actions/changed-files@823fcebdb31bb35fdf2229d9f769b400309430d0 # v46
        with:
          # Avoid using single or double quotes for multiline patterns
          files: |
            .github/workflows/matrix.json
             dockerfiles/Dockerfile
            .github/workflows/SCHED_build_docker.yml
  get_branch_name:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch-names.outputs.current_branch }}
      main_name: ${{ steps.branch-names.outputs.default_branch }}
    steps:
      - name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

  read_matrix:
    runs-on: ubuntu-latest
    needs: [ changed-files ]
    if: needs.changed-files.outputs.files_changed == 'true'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
     - name: Checkout to repository
       uses: actions/checkout@v4
     - name: Set matrix data
       id: set-matrix
       run: echo "matrix=$(jq -c . < .github/workflows/matrix.json)" >> $GITHUB_OUTPUT

  build-docker-images:
    needs: [ read_matrix, changed-files ]
    if: needs.changed-files.outputs.files_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    strategy:
        matrix:
          ${{ insert }}: ${{ fromJson(needs.read_matrix.outputs.matrix) }}
          exclude:
            - python-version: 3.9
            - python-version: 3.10
            - python-version: 3.11
            - python-version: 3.12

    steps:
    #Set up QEMU for ARM support
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

        # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3 # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.singularity.provider }}/${{ matrix.singularity.version }}/${{ matrix.python-version }}
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.singularity.provider }}/${{ matrix.singularity.version }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6 # v5.0.0
        with:
          file: ./dockerfiles/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64,linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
                      SINGULARITY_PROVIDER=${{ matrix.singularity.provider }}
                      SINGULARITY_VERSION=${{ matrix.singularity.version }}

#                      PYTHON_VERSION=${{ matrix.python-version }}

  dispatch-test-with-build:
    runs-on: ubuntu-latest
    needs: [changed-files, get_branch_name, build-docker-images]
    if: needs.changed-files.outputs.files_changed == 'true'
    permissions: write-all
    steps:
      - name: Launch Tests
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/CI_push.yml/dispatches \
            -d '{"ref": "${{ needs.get_branch_name.outputs.branch_name }}"}'

  dispatch-test-without-build:
    runs-on: ubuntu-latest
    needs: [ changed-files, get_branch_name ]
    if: needs.changed-files.outputs.files_changed == 'false'
    permissions: write-all
    steps:
      - name: Launch Tests
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/CI_push.yml/dispatches \
            -d '{"ref": "${{ needs.get_branch_name.outputs.branch_name }}"}'
