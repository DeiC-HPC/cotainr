name: Build Docker and Deploy Images to GHCR

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches:
      - "main"
      - "docker_dev_env*"
    tags-ignore:
      - "**"
    paths:
      - '.github/workflows/matrix.json'
      - 'dockerfiles/Dockerfile'
      - '.github/workflows/CI_build_push.yml'
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:

  preparation:
    runs-on: ubuntu-latest
    outputs:
      matrix_with_os: ${{ steps.set-matrix-with-os.outputs.matrix_with_os }}
      matrix_without_os: ${{ steps.set-matrix-without-os.outputs.matrix_without_os }}
      lowercase_repo: ${{ steps.lowercase.outputs.lowercase_repo }}
      sha256: ${{ steps.setoutput.outputs.sha256 }}
    steps:
     - name: Checkout to repository
       uses: actions/checkout@v4
     - name: Set matrix data
       id: set-matrix-with-os
       run: |
            matrix=$(jq -c '
            {
              "singularity": .singularity,
              "os": .os
            }
            ' .github/workflows/matrix.json)
            echo "$matrix"
            echo "matrix_with_os=$matrix" >> $GITHUB_OUTPUT
     - name: Set matrix data without os
       id: set-matrix-without-os
       run: |
            matrix=$(jq -c '
            {
              "singularity": .singularity,
            }
            ' .github/workflows/matrix.json)
            echo "$matrix"
            echo "matrix_without_os=$matrix" >> $GITHUB_OUTPUT
     - name:
       id: lowercase
       run: |
            lowercase_repo="${{ github.repository }}"
            lowercase_repo="${lowercase_repo,,}"
            echo "lowercase_repo=$lowercase_repo" >> $GITHUB_OUTPUT
     - name: Echo hash
       id: setoutput
       run: echo "sha256=${{ hashFiles('.github/workflows/matrix.json', 'dockerfiles/Dockerfile', '.github/workflows/CI_build_push.yml') }}" >> $GITHUB_OUTPUT

  build-docker-images:
    needs: [preparation]
    # only runs on ubuntu-latest with qemu. Using different runners for arm and amd64 results in different images on ghcr. So we need slow qemu.
    runs-on: ${{ matrix.os.runs_on }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    strategy:
        matrix:
          ${{ insert }}: ${{ fromJson(needs.preparation.outputs.matrix_with_os) }}

    steps:
    #Set up QEMU for ARM support
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

        # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3 # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.singularity.provider }}/${{ matrix.singularity.version }}
          labels: org.opencontainers.image.description=${{ matrix.os.platform }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6 # v5.0.0
        with:
          file: ./dockerfiles/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ needs.preparation.outputs.lowercase_repo }}/${{ matrix.singularity.provider }}/${{ matrix.singularity.version }}:${{ matrix.os.tag }}-${{ needs.preparation.outputs.sha256 }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.os.platform }}
          provenance: false
          build-args: |
                      SINGULARITY_PROVIDER=${{ matrix.singularity.provider }}
                      SINGULARITY_VERSION=${{ matrix.singularity.version }}

  create-manifest:
    name: Create Multi-Arch Manifest
    needs: [preparation, build-docker-images]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    strategy:
        matrix:
          ${{ insert }}: ${{ fromJson(needs.preparation.outputs.matrix_without_os) }}

    steps:

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.singularity.provider }}/${{ matrix.singularity.version }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Combine and Tag Manifest with Buildx
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ needs.preparation.outputs.lowercase_repo }}/${{ matrix.singularity.provider }}/${{ matrix.singularity.version }}
          HASH=${{ needs.preparation.outputs.sha256 }}

          docker buildx imagetools create \
            --tag $IMAGE:HASH \
            --tag ${{ steps.meta.outputs.tags }} \
            $IMAGE:amd64-$HASH \
            $IMAGE:arm64-$HASH

  dispatch-test-with-build:
    needs: create-manifest
    uses: ./.github/workflows/CI_push.yml
