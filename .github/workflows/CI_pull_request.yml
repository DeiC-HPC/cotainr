name: CI on pull request
on:
  pull_request:
    branches:
      - main
  schedule:
      - cron: '15 2 * * TUE'  # Also run the full test suite for PRs on the main branch every Tuesday night
  workflow_dispatch:  # allow for manually trigging the workflow

jobs:

  prepare-for-build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      matrix_for_linting_building: ${{ steps.set-matrix-for-linting-and-build.outputs.matrix_for_linting_building }}
      lowercase_repo_name: ${{ steps.lowercase.outputs.lowercase_repo_name }}
      input_trigger_files_sha256: ${{ steps.setoutput.outputs.input_trigger_files_sha256 }}
    steps:
      - name: Checkout to repository
        uses: actions/checkout@v4
      - name: Set matrix data
        id: set-matrix
        # First generate a full matrix. Echo the matrix for debugging purposes. Last set the output properly.
        run: |
            matrix=$(jq -c . <  .github/workflows/matrix.json)
            echo "$matrix"
            echo "matrix=$matrix" >> $GITHUB_OUTPUT
      - name: Set matrix data
        id: set-matrix-for-linting-and-build
        # Generate a limited matrix for the linting step. The linting only needs to be run once for one python version and one singularity/apptainer version.
        run: |
            matrix=$(jq -c '
            {
              "python-version": [ ."python-version" | first ],
              "singularity": [ ."singularity" | first ],
              "os": [ ."os" | first ]
            }
            ' .github/workflows/matrix.json)
            echo "$matrix"
            echo "matrix_for_linting_building=$matrix" >> $GITHUB_OUTPUT
      - name: lowercase github.repository
        # The lowercase name of the organisation & repository is needed because the GHCR (github container repository) works with lowercase only.
        id: lowercase
        run: |
              repo_name="${{ github.repository }}"
              lowercase_repo_name="${repo_name,,}"
              echo "lowercase_repo_name=$lowercase_repo_name" >> $GITHUB_OUTPUT
      - name: Set sha256 of the input trigger files
        id: setoutput
        run: echo "input_trigger_files_sha256=${{ hashFiles('.github/workflows/matrix.json', '.github/workflows/dockerfiles/Dockerfile', '.github/workflows/CI_build_docker_images.yml') }}" >> $GITHUB_OUTPUT

  lint-and-format:
    needs: [prepare-for-build]
    name: Lint and check formatting
    runs-on: ${{ matrix.os.runs-on }}
    permissions:
      packages: read
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-for-build.outputs.matrix_for_linting_building) }}
    container:
      image: ghcr.io/${{ needs.prepare-for-build.outputs.lowercase_repo_name }}-dev_env-${{ matrix.singularity.provider }}-${{ matrix.singularity.version }}:${{ needs.prepare-for-build.outputs.input_trigger_files_sha256 }}
      options: --user=1001
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Verify the uv.lock is up-to-date
        run: uv lock --check
      - name: Install linting dependencies
        run: uv sync --python ${{ matrix.python-version }} --managed-python --group=lint --frozen
      - name: Restore pre-commit cache
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/.cache/pre-commit
          key: pre-commit-3-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Run pre-commit on all files
        working-directory: ${{ github.workspace }}
        run: uv run pre-commit run --show-diff-on-failure --color=always --all-files

  build:
    needs: [prepare-for-build]
    name: Build package
    runs-on: ${{ matrix.os.runs-on }}
    permissions:
      packages: read
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-for-build.outputs.matrix_for_linting_building) }}
    container:
      image: ghcr.io/${{ needs.prepare-for-build.outputs.lowercase_repo_name }}-dev_env-${{ matrix.singularity.provider }}-${{ matrix.singularity.version }}:${{ needs.prepare-for-build.outputs.input_trigger_files_sha256 }}
      options: --user=1001
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build the Python Package
        run: uv build
      - name: Upload build artifacts for subsequent workflow steps
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  run-full-test-suite:
    needs: [prepare-for-build]
    name: Run full test suite
    runs-on: ${{ matrix.os.runs-on }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-for-build.outputs.matrix) }}
    permissions:
      packages: read
    container:
      image: ghcr.io/${{ needs.prepare-for-build.outputs.lowercase_repo_name }}-dev_env-${{ matrix.singularity.provider }}-${{ matrix.singularity.version }}:${{ needs.prepare-for-build.outputs.input_trigger_files_sha256 }}
      options: --privileged
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install test dependencies
        run: uv sync --python ${{ matrix.python-version }} --managed-python --group=tests --frozen
      - name: Run test suite via pytest
        run: uv run pytest -vv --junitxml=pytest_junit_out.xml
      - name: Archive the test results and coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-results-and-coverage_python${{ matrix.python-version }}_${{ matrix.singularity.provider }}${{ matrix.singularity.version }}_${{ matrix.os.tag }}
          path: |
            pytest_junit_out.xml
            htmlcov/*
